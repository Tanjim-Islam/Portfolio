index.html:
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="logo.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Tanjim Riju</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>


postcss.config.cjs:
module.exports = {
    plugins: {
        tailwindcss: {},
        autoprefixer: {},
    }
}

tailwind.config.cjs:
module.exports = {
  content: ["./src/**/*.{js,jsx}"],
  mode: "jit",
  theme: {
    extend: {
      colors: {
        primary: "#121212",
        secondary: "#F0EFEB",
        tertiary: "#121212",
        quaternary: "#1689C8",
      },
      screens: {
        xs: "450px",
        "3xl": "2160px",
      },
      backgroundImage: {
        "hero-pattern": "url('/src/assets/herobg.jpeg')",
      },
      keyframes: {
        textRotate1: {
          "0%, 40%": { transform: "translate3d(0, 0%, 0) rotateX(0deg)" },
          "60%, 100%": {
            transform: "translate3d(0, -100%, 0) rotateX(-90deg)",
          },
        },
        textRotate2: {
          "0%, 40%": { transform: "translate3d(0, 100%, 0) rotateX(-90deg)" },
          "60%, 100%": { transform: "translate3d(0, 0%, 0) rotateX(0deg)" },
        },
      },
      animation: {
        textRotate1: "textRotate1 2.4s infinite alternate",
        textRotate2: "textRotate2 2.4s infinite alternate",
      },
      fontSize: {
        title: "2rem",
        subtitle: "1.5rem",
      },
    },
  },
  plugins: [],
};


vite.config.js:
import react from '@vitejs/plugin-react'
import { defineConfig } from 'vite'

export default defineConfig({
  plugins: [react()],
  assetsInclude: ['**/*.glb', '**/*.gltf'],
})


src\App.jsx:
import { useEffect, useRef } from "react";
import { BrowserRouter } from "react-router-dom";
import {
  Contact,
  Experience,
  Hero,
  Navbar,
  Portfolio,
  Education,
} from "./components"; // Importing Education component

const App = () => {
  const wrapperRef = useRef(null);

  return (
    <BrowserRouter>
      <div className="relative z-0 bg-primary">
        <Navbar />
        <div className="wrapper" ref={wrapperRef}>
          <div id="hero" className="z-10">
            <Hero scrollContainer={wrapperRef} />
          </div>
          <div id="education" className="relative z-30 bg-primary mt-[-2px]">
            <Education />
          </div>
          <div id="portfolio" className="relative z-30 bg-primary mt-[-2px]">
            <Portfolio />
          </div>
          <div id="experience" className="relative z-30 bg-primary">
            <Experience />
          </div>
          <div id="contact" className="relative z-30 bg-primary">
            <Contact />
          </div>
        </div>
      </div>
    </BrowserRouter>
  );
};

export default App;


src\index.css:
@import url("https://fonts.googleapis.com/css2?family=Nunito:wght@100;200;300;400;500;600;700;800;900&display=swap");

@tailwind base;
@tailwind components;
@tailwind utilities;

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "Nunito", sans-serif;
  scroll-behavior: smooth;
  color-scheme: dark;
}

.hash-span {
  margin-top: -100px;
  padding-bottom: 100px;
  display: block;
}

.canvas-loader {
  font-size: 10px;
  width: 1em;
  height: 1em;
  border-radius: 50%;
  position: relative;
  text-indent: -9999em;
  animation: mulShdSpin 1.1s infinite ease;
  transform: translateZ(0);
}

.wrapper {
  height: 100vh;
  overflow-y: auto;
  overflow-x: hidden;
  perspective: 10px;
}

.parallax {
  position: relative;
  min-height: 75vh;
  min-width: 2000px;
  width: 100%;
  left: 50%; /* Center the image horizontally */
  transform: translateX(-50%); /* Center the image horizontally */
  display: grid;
  grid-template-areas: "stack";
}

.parallax > * {
  grid-area: stack;
  will-change: transform;
  animation: parallax linear;
  animation-timeline: scroll();
}

.parallax > img {
  width: 100%;
}

.parallax__stars {
  --parallax-speed: 320;
  z-index: 2;
}

.parallax__planets {
  --parallax-speed: 290;
  z-index: 3;
}

.parallax__sun {
  --parallax-speed: 270;
  z-index: 4;
}

.parallax__mountain1 {
  --parallax-speed: 250;
  z-index: 5;
}

.parallax__mountain2 {
  --parallax-speed: 140;
  z-index: 6;
}

.parallax__crater {
  z-index: 4;
}

.parallax__content {
  will-change: transform;
  transition: transform 0.3s ease-in-out;
  --parallax-speed: 210;
  z-index: 5;
  display: flex;
  flex-direction: column;
  align-items: center;
  text-align: center;
}

@media (min-width: 1024px) {
  .parallax__content {
    flex-direction: row;
    text-align: left;
  }
}

@keyframes parallax {
  to {
    transform: translateY(calc(var(--parallax-speed) * 1vh));
  }
}

.project-card {
  transition: transform 0.5s ease-out;
}

.project-card img {
  border-radius: 15px;
}

.project-card .text-left {
  text-align: left;
}

.project-card .text-right {
  text-align: right;
}

.streaky-glow {
  position: relative;
  font-family: inherit;
  color: transparent;
  background: linear-gradient(90deg, #fff, rgba(255, 200, 0, 0.679), #0ff, #fff);
  background-size: 200% 200%;
  -webkit-background-clip: text;
  background-clip: text;
  animation: glow 4s infinite alternate, streaky-move 4s linear infinite;
}

@keyframes glow {
  0% {
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.2), 
                 0 0 10px rgba(255, 255, 255, 0.2), 
                 0 0 20px rgba(255, 255, 255, 0.2), 
                 0 0 40px rgba(255, 255, 255, 0.2), 
                 0 0 60px rgba(255, 255, 255, 0.2);
  }
  100% {
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.2), 
                 0 0 10px rgba(255, 255, 255, 0.4), 
                 0 0 20px rgba(255, 255, 255, 0.6), 
                 0 0 40px rgba(255, 255, 255, 0.8), 
                 0 0 60px rgba(255, 255, 255, 1);
  }
}

@keyframes streaky-move {
  0% {
    background-position: 0% 0%;
  }
  100% {
    background-position: 200% 200%;
  }
}

@keyframes mulShdSpin {
  0%, 100% {
    box-shadow: 0em -2.6em 0em 0em #ffffff,
                1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),
                2.5em 0em 0 0em rgba(255, 255, 255, 0.2),
                1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),
                0em 2.5em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),
                -2.6em 0em 0 0em rgba(255, 255, 255, 0.5),
                -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7);
  }
  12.5% {
    box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.7),
                1.8em -1.8em 0 0em #ffffff,
                2.5em 0em 0 0em rgba(255, 255, 255, 0.2),
                1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),
                0em 2.5em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),
                -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5);
  }
  25% {
    box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.5),
                1.8em -1.8em 0 0em rgba(255, 255, 255, 0.7),
                2.5em 0em 0 0em #ffffff,
                1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),
                0em 2.5em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),
                -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);
  }
  37.5% {
    box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),
                1.8em -1.8em 0 0em rgba(255, 255, 255, 0.5),
                2.5em 0em 0 0em rgba(255, 255, 255, 0.7),
                1.75em 1.75em 0 0em #ffffff,
                0em 2.5em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),
                -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);
  }
  50% {
    box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),
                1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),
                2.5em 0em 0 0em rgba(255, 255, 255, 0.5),
                1.75em 1.75em 0 0em rgba(255, 255, 255, 0.7),
                0em 2.5em 0 0em #ffffff,
                -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.2),
                -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);
  }
  62.5% {
    box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),
                1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),
                2.5em 0em 0 0em rgba(255, 255, 255, 0.2),
                1.75em 1.75em 0 0em rgba(255, 255, 255, 0.5),
                0em 2.5em 0 0em rgba(255, 255, 255, 0.7),
                -1.8em 1.8em 0 0em #ffffff,
                -2.6em 0em 0 0em rgba(255, 255, 255, 0.2),
                -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);
  }
  75% {
    box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),
                1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),
                2.5em 0em 0 0em rgba(255, 255, 255, 0.2),
                1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),
                0em 2.5em 0 0em rgba(255, 255, 255, 0.5),
                -1.8em 1.8em 0 0em rgba(255, 255, 255, 0.7),
                -2.6em 0em 0 0em #ffffff,
                -1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2);
  }
  87.5% {
    box-shadow: 0em -2.6em 0em 0em rgba(255, 255, 255, 0.2),
                1.8em -1.8em 0 0em rgba(255, 255, 255, 0.2),
                2.5em 0em 0 0em rgba(255, 255, 255, 0.2),
                1.75em 1.75em 0 0em rgba(255, 255, 255, 0.2),
                0em 2.5em 0 0em rgba(255, 255, 255, 0.5),
                -2.6em 0em 0 0em rgba(255, 255, 255, 0.7),
                -1.8em -1.8em 0 0em #ffffff;
  }
}

.glass-morphism {
  background: rgba(255, 255, 255, 0.1);
  border-radius: 10px;
  box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
  backdrop-filter: blur(10px);
  -webkit-backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.3);
  padding: 10px;
  transition: transform 0.2s ease-in-out;
}

.golden-glow {
  box-shadow: 0 0 10px rgba(255, 215, 0, 0.8);
  transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
}

.glass-morphism:hover {
  transform: scale(1.1);
  box-shadow: 0 0 10px rgba(255, 215, 0, 0.8);
}

.sectionSubTextLarge {
  font-size: 30px; /* Adjust the size as needed */
}

/* Added scale effect for education cards */
.vertical-timeline-element:hover {
  transform: scale(1.05);
  transition: transform 0.3s ease-in-out;
}

src\main.jsx:
import React from "react";
import ReactDOM from "react-dom/client";

import App from "./App";
import "./index.css";

ReactDOM.createRoot(document.getElementById("root")).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


src\styles.js:
const styles = {
  sectionText:
    "text-white font-bold md:text-[80px] sm:text-[50px] text-[40px]",
};

export { styles };


src\assets\index.js:
import close from "./close.svg";
import logo from "./logo.svg";
import menu from "./menu.svg";

import homiestay from "./homiestay.png";
import fakenews from "./fakenews.png";
import yolov8 from "./yolov8.png";

export { homiestay, close, fakenews, logo, menu, yolov8 };



src\components\Contact.jsx:
import emailjs from "@emailjs/browser";
import { motion, useAnimation } from "framer-motion";
import React, { useEffect, useRef, useState } from "react";

import { SectionWrapper } from "../hoc";
import { styles } from "../styles";

const Contact = () => {
  const formRef = useRef();
  const [form, setForm] = useState({
    name: "",
    email: "",
    message: "",
  });

  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});
  const controls = useAnimation();

  useEffect(() => {
    controls.start("show");
  }, [controls]);

  const validateForm = () => {
    let errors = {};
    if (!form.name) errors.name = "Name is required";
    if (!form.email) errors.email = "Email is required";
    else if (!/\S+@\S+\.\S+/.test(form.email))
      errors.email = "Email is invalid";
    if (!form.message) errors.message = "Message is required";
    return errors;
  };

  const handleSubmit = (e) => {
    const validationErrors = validateForm();
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      e.preventDefault();
    }
  };

  return (
    <div className="md:m-12 md:px-48 flex flex-col sm:flex-row gap-10 overflow-hidden">
      <motion.div
        initial="hidden"
        animate={controls}
        variants={{
          hidden: {
            opacity: 0,
            y: 100,
          },
          show: {
            opacity: 1,
            y: 0,
            transition: {
              type: "tween",
              duration: 1,
              delay: 0.2,
            },
          },
        }}
        className="flex-[0.8] md:pb-40 mx-4 sm:mx-auto"
      >
        <h3 className={styles.sectionText}>Contact</h3>

        <form
          ref={formRef}
          action="https://getform.io/f/jawxpozb"
          method="POST"
          onSubmit={handleSubmit}
          className="mt-12 gap-4 flex flex-col"
        >
          <span className="text-white font-medium mt-3">Full Name</span>
          <input
            type="text"
            name="name"
            placeholder="Enter your full name"
            className="bg-tertiary p-4 text-white border font-medium rounded-xl" // Changed to "rounded-xl"
            value={form.name}
            onChange={(e) => setForm({ ...form, name: e.target.value })}
          />
          {errors.name && <span className="text-red-500">{errors.name}</span>}
          <span className="text-white font-medium mt-3">Email Address</span>
          <input
            type="text"
            name="email"
            placeholder="Enter your email address"
            className="bg-tertiary p-4 text-white border font-medium rounded-xl" // Changed to "rounded-xl"
            value={form.email}
            onChange={(e) => setForm({ ...form, email: e.target.value })}
          />
          {errors.email && <span className="text-red-500">{errors.email}</span>}
          <span className="text-white font-medium mt-3">Message</span>
          <textarea
            name="message"
            placeholder="Enter your message"
            rows="10"
            className="bg-tertiary p-4 text-white border font-medium rounded-xl" // Changed to "rounded-xl"
            value={form.message}
            onChange={(e) => setForm({ ...form, message: e.target.value })}
          />
          {errors.message && (
            <span className="text-red-500">{errors.message}</span>
          )}
          <button
            type="submit"
            className="bg-tertiary py-3 px-8 w-fit text-white font-bold shadow-md shadow-primary border border-white rounded-xl" // Added "border border-white rounded-xl"
          >
            {loading ? "Sending..." : "Send"}
          </button>
        </form>
      </motion.div>
    </div>
  );
};

export default SectionWrapper(Contact, "contact");


src\components\Education.jsx:
import React from "react";
import {
  VerticalTimeline,
  VerticalTimelineElement,
} from "react-vertical-timeline-component";
import { motion } from "framer-motion";

import "react-vertical-timeline-component/style.min.css";

import { styles } from "../styles";
import { SectionWrapper } from "../hoc";
import { textVariant } from "../utils/motion";

const educationData = [
  {
    title: "SSC (2017)",
    institution: "Chetona Model Academy",
    location: "Mirpur, Dhaka",
    subject: "Science",
    link: "https://maps.app.goo.gl/KQyzN9RGkF5rKwwa7",
  },
  {
    title: "HSC (2019)",
    institution: "Bangladesh International School and College",
    location: "Mohakhali DOHS, Dhaka",
    subject: "Science",
    link: "https://maps.app.goo.gl/K7nGAU1NkMH7j5dh6",
  },
  {
    title: "University (2020-2024)",
    institution: "BRAC University",
    location: "Badda, Dhaka",
    subject: "Computer Science and Engineering",
    link: "https://maps.app.goo.gl/gMh6HGWGodL2bGLT8",
  },
];

const EducationCard = ({ education }) => {
  return (
    <VerticalTimelineElement
      contentStyle={{
        background: "#1d1836",
        color: "#fff",
      }}
      contentArrowStyle={{ borderRight: "7px solid  #232631" }}
      date={education.title}
      iconStyle={{ background: "#f9c74f", color: "#fff" }}
    >
      <a
        href={education.link}
        target="_blank"
        rel="noopener noreferrer"
        aria-label={`Location of ${education.institution}`}
      >
        <h3 className="text-white text-[24px] font-bold">
          {education.institution}
        </h3>
        <p
          className="text-secondary text-[16px] font-semibold"
          style={{ margin: 0 }}
        >
          {education.location}
        </p>
        <p
          className="text-secondary text-[14px] font-semibold"
          style={{ margin: 0 }}
        >
          {education.subject}
        </p>
      </a>
    </VerticalTimelineElement>
  );
};

const Education = () => {
  return (
    <>
      <motion.div variants={textVariant()}>
        <p
          className={`${styles.sectionSubText} sectionSubTextLarge text-center`}
        >
          Where I've Studied
        </p>
      </motion.div>

      <div className="mt-20 flex flex-col">
        <VerticalTimeline>
          {educationData.map((education, index) => (
            <EducationCard key={`education-${index}`} education={education} />
          ))}
        </VerticalTimeline>
      </div>
    </>
  );
};

export default SectionWrapper(Education, "education");


src\components\Experience.jsx:
import { motion } from "framer-motion";
import React, { useEffect, useState } from "react";

import { experiences } from "../data";
import { SectionWrapper } from "../hoc";
import { styles } from "../styles";
import { textVariant } from "../utils/motion";

const ExperienceCard = ({ experience, onClick, isActive, isMobile }) => {
  return (
    <motion.div
      whileHover={{ scale: 1.05 }} // subtle hover animation
      onClick={onClick}
      className={`cursor-pointer sm:mb-5 p-5 max-w-xl relative sm:text-left text-center ${
        isMobile ? "text-quaternary" : ""
      }`}
    >
      {(isActive || isMobile) && (
        <div className="absolute left-0 top-0 bottom-0 w-3 md:w-5 bg-tertiary my-6 sm:block hidden"></div>
      )}
      <h3
        className={`text-xl lg:text-2xl xl:text-3xl font-bold sm:pl-8 ${
          isActive || isMobile ? "text-quaternary" : "text-slate-600"
        }`}
      >
        {experience.title}
      </h3>
      <p
        className={`text-md lg:text-lg xl:text-2xl sm:font-medium pt-2 sm:pl-8 ${
          isActive || isMobile ? "text-white" : "text-slate-600"
        }`}
      >
        {experience.company_name} | {experience.date}
      </p>
    </motion.div>
  );
};

const ExperienceDetails = ({ experience }) => {
  return (
    <motion.div
      initial={{ opacity: 0, y: 50 }} // initial animation state
      animate={{ opacity: 1, y: 0 }} // animate state
      transition={{ duration: 0.5 }} // transition duration
      className="mt-5"
    >
      <ul className="max-w-7xl list-none space-y-8 border-4 lg:border-8 rounded-xl lg:rounded-3xl p-6">
        {experience.details.map((detail, index) => (
          <li
            key={`experience-detail-${index}`}
            className="text-slate-500 font-semibold text-[10px] xs:text-[14px] md:text-[18px] lg:text-[22px] xl:text-[28px] lg:leading-[30px]"
            dangerouslySetInnerHTML={{ __html: detail }}
          />
        ))}
      </ul>
    </motion.div>
  );
};

const Experience = () => {
  const [selectedJob, setSelectedJob] = useState(experiences[0]);
  const [isMobile, setIsMobile] = useState(false);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 640);
    };

    handleResize(); // initial screen size
    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  return (
    <div className="sm:my-20">
      <motion.div variants={textVariant()}>
        <h2 className={`${styles.sectionText} text-center`}>
          Experience
        </h2>
      </motion.div>

      <div className="relative mt-10 md:mt-20 md:p-20 flex flex-col items-center sm:flex-row sm:items-start">
        <div className="flex flex-col z-10 sm:w-auto sm:w-full">
          {experiences.map((experience, index) => (
            <ExperienceCard
              key={`experience-${index}`}
              experience={experience}
              onClick={() => setSelectedJob(experience)}
              isActive={selectedJob === experience}
              isMobile={isMobile}
            />
          ))}
        </div>

        <div className="flex justify-end z-10 sm:block hidden">
          <ExperienceDetails experience={selectedJob} />
        </div>
      </div>
    </div>
  );
};

export default SectionWrapper(Experience, "portfolio");


src\components\Hero.jsx:
import { useEffect, useRef } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { SpacemanCanvas } from ".";
import Position from "./Position";

gsap.registerPlugin(ScrollTrigger);

const Hero = ({ scrollContainer }) => {
  const parallaxRef = useRef(null);

  useEffect(() => {
    const element = parallaxRef.current;

    gsap.to(".parallax__stars", {
      yPercent: 0,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        scrub: true,
      },
    });

    gsap.to(".parallax__planets", {
      yPercent: 15,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        scrub: true,
      },
    });

    gsap.to(".parallax__sun", {
      yPercent: 10,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        scrub: true,
      },
    });

    gsap.to(".parallax__mountain1", {
      yPercent: 8,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        scrub: true,
      },
    });

    gsap.to(".parallax__mountain2", {
      yPercent: 5,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        scrub: true,
      },
    });

    gsap.to(".parallax__crater", {
      yPercent: 3,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        scrub: true,
      },
    });

    gsap.to(".parallax__content", {
      yPercent: 2,
      ease: "none",
      scrollTrigger: {
        trigger: element,
        scrub: true,
      },
    });
  }, []);

  return (
    <section id="hero" className="parallax" ref={parallaxRef}>
      <div className="parallax__content absolute top-[10%] sm:top-[16%] lg:top-[24%] w-full mx-auto lg:pl-[38vh] lg:pr-[30vh] xl:pl-96 xl:pr-72 2xl:px-40 3xl:px-60 flex flex-col lg:flex-row items-start z-10">
        <div className="flex-1 lg:mb-0">
          <h1 className="font-medium text-white text-[40px] xs:text-[50px] sm:text-[68px] md:text-[80px] lg:text-[100px] 2xl:text-[180px] leading-[110px] 2xl:leading-[160px]">
            TANJIM RIJU
          </h1>
          <Position />
        </div>
        <div className="flex-1 flex justify-start lg:justify-end mt-4 sm:mt-14 ml-8 xs:ml-[-4vh] sm:ml-[-17vh] md:ml-[-26vh] lg:mt-10 2xl:mt-0">
          <div className="font-bold text-[20px] sm:text-[30px] md:text-[36px] 2xl:text-[46px] sm:leading-[40px] md:leading-[50px] 2xl:leading-[60px] streaky-glow max-w-sm 2xl:max-w-lg text-white text-left">
            Turning lines of code into intelligent solutions and seamless
            experiences.
          </div>
        </div>
      </div>

      <img
        className="parallax__stars"
        src="./parallax/1Stars.svg"
        alt="Stars"
      />
      <img
        className="parallax__planets"
        src="./parallax/2Planets.svg"
        alt="Planets"
      />
      <img
        className="parallax__mountain1"
        src="./parallax/3Mountain.svg"
        alt="Mountain"
      />
      <img
        className="parallax__mountain2"
        src="./parallax/4Mountain.svg"
        alt="Mountain"
      />
      <img
        className="parallax__crater"
        src="./parallax/5Crater.svg"
        alt="Crater"
      />
      <img className="parallax__sun" src="./parallax/6Sun.svg" alt="Sun" />

      <SpacemanCanvas scrollContainer={scrollContainer} />
    </section>
  );
};

export default Hero;


src\components\Loader.jsx:
import { Html, useProgress } from "@react-three/drei";

const CanvasLoader = () => {
  const { progress } = useProgress();
  return (
    <Html
      as='div'
      center
      style={{
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
        flexDirection: "column",
      }}
    >
      <span className='canvas-loader'></span>
      <p
        style={{
          fontSize: 14,
          color: "#F1F1F1",
          fontWeight: 800,
          marginTop: 40,
        }}
      >
        {progress.toFixed(2)}%
      </p>
    </Html>
  );
};

export default CanvasLoader;


src\components\Navbar.jsx:
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import { close, menu } from "../assets";
import { navLinks } from "../data";
import { FaFacebook, FaLinkedin, FaGithub, FaEnvelope } from "react-icons/fa";
import toast, { Toaster } from "react-hot-toast";

const Navbar = () => {
  const [active, setActive] = useState("hero");
  const [toggle, setToggle] = useState(false);
  const [scrolled, setScrolled] = useState(false);

  useEffect(() => {
    const handleScroll = () => {
      const scrollTop = window.scrollY;
      setScrolled(scrollTop > 100);
    };

    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  useEffect(() => {
    const sections = document.querySelectorAll("div[id]");
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setActive(entry.target.id);
          }
        });
      },
      {
        threshold: 0.2,
        rootMargin: "0px 0px -50% 0px",
      }
    );

    sections.forEach((section) => observer.observe(section));

    return () => sections.forEach((section) => observer.unobserve(section));
  }, []);

  const scrollToTop = () => {
    window.scrollTo({
      top: 0,
      behavior: "smooth",
    });
    setActive("hero");
  };

  const copyEmailToClipboard = () => {
    navigator.clipboard.writeText("tanjim.riju1243@gmail.com");
    toast.success("Email Copied!", {
      style: {
        borderRadius: "10px",
        background: "#333",
        color: "#fff",
      },
    });
  };

  return (
    <nav className="w-full flex items-center bg-gradient-to-b from-black sm:bg-none p-8 sm:px-16 sm:py-10 fixed z-40 pointer-events-none">
      <div className="w-full flex justify-between items-start mx-auto">
        <div className="flex items-center space-x-4">
          <a
            href="https://www.linkedin.com/in/tanjim-riju-7b0683234/"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="LinkedIn"
          >
            <FaLinkedin className="text-white text-[36px] sm:text-[26px] lg:text-[36px] pointer-events-auto cursor-pointer glass-morphism hover:golden-glow" />
          </a>
          <a
            href="https://github.com/Tanjim-Islam"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="GitHub"
          >
            <FaGithub className="text-white text-[36px] sm:text-[26px] lg:text-[36px] pointer-events-auto cursor-pointer glass-morphism hover:golden-glow" />
          </a>

          <a
            href="https://www.facebook.com/tanjim.islam1"
            target="_blank"
            rel="noopener noreferrer"
            aria-label="Facebook"
          >
            <FaFacebook className="text-white text-[36px] sm:text-[26px] lg:text-[36px] pointer-events-auto cursor-pointer glass-morphism hover:golden-glow" />
          </a>

          <div onClick={copyEmailToClipboard} aria-label="Email">
            <FaEnvelope className="text-white text-[36px] sm:text-[26px] lg:text-[36px] pointer-events-auto cursor-pointer glass-morphism hover:golden-glow" />
          </div>
        </div>

        <ul className="list-none hidden sm:flex flex-col gap-5">
          {navLinks.map((nav) => (
            <li
              key={nav.id}
              className={`relative flex items-center ${
                active === nav.id ? "text-white" : "text-slate-500"
              } hover:text-white text-[18px] lg:text-[24px] font-bold pointer-events-auto cursor-pointer`}
              onClick={() => setActive(nav.id)}
            >
              {active === nav.id && (
                <div className="fixed right-10 w-2 h-6 lg:h-8 bg-quaternary"></div>
              )}
              <a href={`#${nav.id}`}>{nav.title}</a>
            </li>
          ))}
        </ul>

        <div className="sm:hidden flex flex-1 justify-end items-center">
          <img
            src={toggle ? close : menu}
            alt="menu"
            className="w-[28px] h-[28px] object-contain pointer-events-auto cursor-pointer"
            onClick={() => setToggle(!toggle)}
          />

          <div
            className={`${
              !toggle ? "hidden" : "flex"
            } p-6 absolute top-20 right-0 mx-4 my-2 min-w-[140px] z-30 rounded-xl`}
          >
            <ul className="list-none flex justify-end items-start flex-1 flex-col gap-4">
              {navLinks.map((nav) => (
                <li
                  key={nav.id}
                  className={`font-poppins font-medium cursor-pointer text-[16px] ${
                    active === nav.id ? "text-quaternary" : "text-secondary"
                  }`}
                  onClick={() => {
                    setToggle(!toggle);
                    setActive(nav.id);
                  }}
                >
                  <a href={`#${nav.id}`}>{nav.title}</a>
                </li>
              ))}
            </ul>
          </div>
        </div>
      </div>
      <Toaster position="top-center" reverseOrder={false} />
    </nav>
  );
};

export default Navbar;


src\components\Portfolio.jsx:
import { motion, useAnimation } from "framer-motion";
import React, { useEffect } from "react";
import { useInView } from "react-intersection-observer";

import { portfolio } from "../data";
import { SectionWrapper } from "../hoc";
import { styles } from "../styles";
import { fadeIn, textVariant } from "../utils/motion";

const ProjectCard = ({
  index,
  name,
  description,
  image,
}) => {
  const controls = useAnimation();
  const { ref, inView } = useInView({
    threshold: 0.1,
  });

  useEffect(() => {
    if (inView) {
      controls.start("show");
    }
  }, [controls, inView]);

  const isEven = index % 2 === 0;

  return (
    <motion.div
      ref={ref}
      animate={controls}
      initial="hidden"
      variants={fadeIn("up", "spring", 0, 0.75)}
      className={`w-full mt-[-2px] flex flex-col md:flex-row ${isEven ? "md:flex-row" : "md:flex-row-reverse"} gap-5`}
    >
      <div className='relative w-full md:w-3/5'>
        <img
          src={image}
          alt='project_image'
          className='w-full h-auto object-cover md:rounded-3xl'
        />
      </div>

      <div className={`w-full md:w-2/5 px-6 md:p-16 flex flex-col justify-center ${isEven ? "text-left md:text-left" : "text-left md:text-right"}`}>
        <h3 className='text-white font-medium text-md sm:text-lg md:text-xl lg:text-2xl xl:text-3xl 2xl:text-4xl lg:text-5xl leading-tight'>{name}</h3>
        <p className='mt-4 text-secondary text-sm sm:text-xs md:text-sm lg:text-md xl:text-lg 2xl:text-xl'>{description}</p>
      </div>
    </motion.div>
  );
};

const Portfolio = () => {
  return (
    <div className='text-center md:text-left md:px-20 lg:px-40'>
      <motion.div variants={textVariant()}>
        <h2 className={`${styles.sectionText}`}>Portfolio</h2>
      </motion.div>

      <div className='mt-10 md:mt-20 flex flex-col gap-10 md:gap-20'>
        {portfolio.map((project, index) => (
          <ProjectCard key={`project-${index}`} index={index} {...project} />
        ))}
      </div>
    </div>
  );
};

export default SectionWrapper(Portfolio, "portfolio");


src\components\Position.jsx:
import React from 'react';

const produceSpans = (text, animation) => {
  return text.split("").map((letter, index) => (
    <span
      key={index}
      className={`inline-block transform-style-3d origin-bottom ${animation}`}
      style={{ animationDelay: `${index * 0.05}s` }}
    >
      {letter === " " ? "\u00A0" : letter}
    </span>
  ));
};

const Position = () => {
  return (
    <div className="relative cursor-default font-medium text-white text-[16px] xs:text-[20px] sm:text-[30px] md:text-[36px] 2xl:text-[66px] leading-[32px] 2xl:leading-[40px] w-full flex justify-center items-center">
      <div className="absolute inset-0 top-[-30px] sm:top-[-10px] lg:top-0 flex flex-col">
        <div
          className="text first absolute left-1 md:left-2 2xl:left-4 flex"
          aria-label="Software Developer"
        >
          {produceSpans("Software Developer", "animate-textRotate1")}
        </div>
        <div
          className="text second absolute left-1 md:left-2 2xl:left-4 flex"
          aria-label="AI/ML Engineer"
        >
          {produceSpans("AI/ML Engineer", "animate-textRotate2")}
        </div>
      </div>
    </div>
  );
};

export default Position;


src\components\Spaceman.jsx:
import { useAnimations, useGLTF } from "@react-three/drei";
import { Canvas } from "@react-three/fiber";
import { Suspense, useEffect, useRef, useState, useCallback } from "react";
import spacemanScene from "../assets/3d/spaceman.glb";
import CanvasLoader from "./Loader";
import { OrbitControls } from "@react-three/drei";

const Spaceman = ({ scale, position }) => {
  const spacemanRef = useRef();
  const { scene, animations } = useGLTF(spacemanScene);
  const { actions } = useAnimations(animations, spacemanRef);

  useEffect(() => {
    actions["Idle"].play();
  }, [actions]);

  return (
    <mesh
      ref={spacemanRef}
      position={position}
      scale={scale}
      rotation={[0, 2.2, 0]}
    >
      <primitive object={scene} />
    </mesh>
  );
};

const SpacemanCanvas = ({ scrollContainer }) => {
  const [rotationX, setRotationX] = useState(0);
  const [rotationY, setRotationY] = useState(0);
  const [scale, setScale] = useState([2, 2, 2]);
  const [position, setPosition] = useState([0.2, -0.7, 0]);

  // Debounce function
  const debounce = (func, wait) => {
    let timeout;
    return (...args) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => func(...args), wait);
    };
  };

  // Scroll handler with debounce
  const handleScroll = useCallback(
    debounce(() => {
      const scrollTop = scrollContainer.current.scrollTop;
      const rotationXValue = scrollTop * -0.0006;
      const rotationYValue = scrollTop * -0.00075;
      setRotationX(rotationXValue);
      setRotationY(rotationYValue);
    }, 10), // Adjust the debounce wait time if necessary
    []
  );

  useEffect(() => {
    const handleResize = () => {
      if (window.innerWidth < 768) {
        setScale([1, 1, 1]);
        setPosition([0.2, -0.1, 0]);
      } else if (window.innerWidth < 1024) {
        setScale([1.33, 1.33, 1.33]);
        setPosition([0.2, -0.3, 0]);
      } else if (window.innerWidth < 1280) {
        setScale([1.5, 1.5, 1.5]);
        setPosition([0.2, -0.4, 0]);
      } else if (window.innerWidth < 1536) {
        setScale([1.66, 1.66, 1.66]);
        setPosition([0.2, -0.5, 0]);
      } else {
        setScale([2, 2, 2]);
        setPosition([0.2, -0.7, 0]);
      }
    };

    handleResize();
    window.addEventListener("scroll", handleScroll);
    window.addEventListener("resize", handleResize);

    return () => {
      window.removeEventListener("scroll", handleScroll);
      window.removeEventListener("resize", handleResize);
    };
  }, [handleScroll, scrollContainer]);

  return (
    <Canvas
      className={`w-full h-screen bg-transparent z-10`}
      camera={{ near: 0.1, far: 1000 }}
    >
      <Suspense fallback={<CanvasLoader />}>
        <directionalLight position={[1, 1, 1]} intensity={2} />
        <ambientLight intensity={0.5} />
        <pointLight position={[10, 5, 10]} intensity={2} />
        <spotLight
          position={[0, 50, 10]}
          angle={0.15}
          penumbra={1}
          intensity={2}
        />
        <hemisphereLight
          skyColor="#b1e1ff"
          groundColor="#000000"
          intensity={1}
        />

        <OrbitControls
          enableZoom={false}
          maxPolarAngle={Math.PI}
          minPolarAngle={0}
        />

        <Spaceman
          rotationX={rotationX}
          rotationY={rotationY}
          scale={scale}
          position={position}
        />
      </Suspense>
    </Canvas>
  );
};

export default SpacemanCanvas;


src\components\index.js:
import Contact from "./Contact";
import Experience from "./Experience";
import Hero from "./Hero";
import CanvasLoader from "./Loader";
import Navbar from "./Navbar";
import Portfolio from "./Portfolio";
import Position from "./Position";
import SpacemanCanvas from "./Spaceman";
import Education from "./Education";

export {
    CanvasLoader, Contact, Experience, Hero, Navbar, Portfolio, Position, SpacemanCanvas, Education,
};



src\data\index.js:
import {
  homiestay,
  fakenews,
  yolov8,
} from "../assets";

export const navLinks = [
  {
    id: "hero",
    title: "Hero",
  },
  {
    id: "education",
    title: "Education",
  },
  {
    id: "portfolio",
    title: "Portfolio",
  },
  {
    id: "experience",
    title: "Experience",
  },
  {
    id: "contact",
    title: "Contact",
  },
];


const experiences = [
  {
    title: "Frontend Developer",
    company_name: "Invicta Solution Limited",
    date: "June 2024 - Present",
    details: [
      "Developed responsive and visually appealing interfaces using <span style='color: white;'> HTML, CSS, JavaScript, React, and Vue. </span>",
      "Collaborated with designers and backend developers to enhance user experience.",
      "Implemented <span style='color: white;'> web performance optimization </span> techniques for faster load times.",
      "Contributed to code reviews and the development of reusable components.",
    ],
  },
];

const portfolio = [
  {
    name: "Hand Sign Recognition with YOLOv8",
    description:
      "A GitHub repo with over 17,000 stars containing a curated list of free online courses from reputable universities that satisfy undergraduate computer science requirements.",
    image: yolov8,
  },
  {
    name: "Fake News Detection",
    description:
      "A newsletter with over 6,000 readers made for software developers to keep up with this rapidly evolving industry, with a sister platform in progress.",
    image: fakenews,
  },
  {
    name: "HomieStay",
    description:
      "HomieStay is a modern, clean, and user-friendly platform for hosting and connecting with people in need of temporary housing.",
    image: homiestay,
  },
];

export { experiences, portfolio };



src\hoc\SectionWrapper.jsx:
import { motion } from "framer-motion";
import { staggerContainer } from "../utils/motion";

const SectionWrapper = (Component, idName) =>
  function HOC() {
    return (
      <motion.section
        variants={staggerContainer()}
        initial='hidden'
        whileInView='show'
        viewport={{ once: true, amount: 0.25 }}
        className='px-0 2xl:px-60 py-10 2xl:py-16 max-w-full mx-auto relative z-0'
      >
        <span className='hash-span' id={idName}>
          &nbsp;
        </span>

        <Component />
      </motion.section>
    );
  };

export default SectionWrapper;


src\hoc\index.js:
import SectionWrapper from "./SectionWrapper";

export { SectionWrapper };


src\utils\motion.js:
export const textVariant = (delay) => {
  return {
    hidden: {
      y: -50,
      opacity: 0,
    },
    show: {
      y: 0,
      opacity: 1,
      transition: {
        type: "spring",
        duration: 1.25,
        delay: delay,
      },
    },
  };
};

export const fadeIn = (direction, type, delay, duration) => {
  return {
    hidden: {
      x: direction === "left" ? 100 : direction === "right" ? -100 : 0,
      y: direction === "up" ? 100 : direction === "down" ? -100 : 0,
      opacity: 0,
    },
    show: {
      x: 0,
      y: 0,
      opacity: 1,
      transition: {
        type: type,
        delay: delay,
        duration: duration,
        ease: "easeOut",
      },
    },
  };
};

export const zoomIn = (delay, duration) => {
  return {
    hidden: {
      scale: 0,
      opacity: 0,
    },
    show: {
      scale: 1,
      opacity: 1,
      transition: {
        type: "tween",
        delay: delay,
        duration: duration,
        ease: "easeOut",
      },
    },
  };
};

export const slideIn = (direction, type, delay, duration) => {
  return {
    hidden: {
      x: direction === "left" ? "-100%" : direction === "right" ? "100%" : 0,
      y: direction === "up" ? "100%" : direction === "down" ? "100%" : 0,
    },
    show: {
      x: 0,
      y: 0,
      transition: {
        type: type,
        delay: delay,
        duration: duration,
        ease: "easeOut",
      },
    },
  };
};

export const staggerContainer = (staggerChildren, delayChildren) => {
  return {
    hidden: {},
    show: {
      transition: {
        staggerChildren: staggerChildren,
        delayChildren: delayChildren || 0,
      },
    },
  };
};


